# .gitignore for Swift, macOS, and iOS Development
#
# A comprehensive list of files and directories to be ignored by Git.
# This covers system-generated files, build artifacts, user-specific settings,
# and common dependency management and tooling files.

### macOS & System Files ###
# Ignore invisible files created by macOS Finder and other system processes.
.DS_Store
.AppleDouble
.LSOverride
._*
.Spotlight-V100
.Trashes
Icon?
ehthumbs.db
Thumbs.db

### Xcode ###
# Ignore user-specific Xcode settings, workspace data, and other generated files.
# These are unique to each user's machine and can cause merge conflicts.

## Build artifacts
build/
.build/
DerivedData/
*.app
*.pkg
*.ipa

## User-specific settings
*.xcodeproj/project.xcworkspace
*.xcodeproj/xcuserdata/
*.xcworkspace/xcuserdata/
xcuserdata/

## Generated files
*.hmap
*.dSYM/
*.dSYM.zip

## Playgrounds
timeline.xctimeline
playground.xcworkspace

## Testing & Code Coverage
# Ignore test reports and code coverage data generated by Xcode.
*.xctestrun
*.testplan
*.xcresult/
*.gcno
*.gcda
*.profdata

### Swift Package Manager (SPM) ###
# The .build directory is where SPM downloads and builds dependencies.
# The `Packages` directory was used by older versions of SPM.
.build/
Packages/

# The Package.resolved file locks the versions of your dependencies.
# It is STRONGLY RECOMMENDED to check this file into source control to ensure
# all team members and your CI server use the exact same dependency versions.
# Do NOT ignore Package.resolved in the root of your project.

# However, user-specific workspace package resolutions can be ignored.
*.xcworkspace/xcshareddata/swiftpm/Package.resolved

### Dependency Management ###

## CocoaPods
# It is generally recommended to check the Pods directory into source control to
# ensure builds are reproducible without relying on the CocoaPods service.
# However, you can ignore it if your team prefers to run `pod install` on checkout.
# See: https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
#
# Pods/

## Carthage
# Ignore compiled frameworks and other Carthage artifacts.
# You should only check in your Cartfile and Cartfile.resolved.
Carthage/Build/
Carthage/Checkouts/

### Tooling ###

## Fastlane
# It is recommended to not store screenshots, reports, or other output in Git.
# Use fastlane to regenerate them when needed.
# See: https://docs.fastlane.tools/best-practices/source-control/
fastlane/report.xml
fastlane/Preview.html
fastlane/screenshots/
fastlane/test_output/

## SwiftLint
# Ignore SwiftLint cache files. The configuration file (.swiftlint.yml) should be
# checked into source control.
.swiftlint_cache/

### Environment ###
# Ignore local environment configuration files.
.env*
*.env

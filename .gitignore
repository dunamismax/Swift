# .gitignore for Swift & macOS Development
#
# This file is a comprehensive list of files and directories that should be
# ignored by Git. It covers system-generated files, build artifacts, user-specific
# settings, and common tools like Swift Package Manager, CocoaPods, and Fastlane.

# --- macOS & System Files ---
# These are invisible files created by the macOS Finder and other system processes.
# They should always be ignored.
.DS_Store
.AppleDouble
.LSOverride
._*
.Spotlight-V100
.Trashes
Icon?
ehthumbs.db
Thumbs.db


# --- General Build Artifacts ---
# Ignore build directories and final packaged applications. These are generated
# from your source code and should not be stored in version control.
build/
.build/
*.app
*.pkg


# --- Xcode Project Files ---
# Ignore user-specific Xcode settings, workspace data, and other generated files.
# These files are unique to each user's machine and can cause merge conflicts.

## User-specific settings
*.xcodeproj/project.xcworkspace
*.xcodeproj/xcuserdata
*.xcworkspace/xcuserdata

## Generated files
*.hmap
*.ipa
*.dSYM.zip
*.dSYM

## Playgrounds
timeline.xctimeline
playground.xcworkspace


# --- Xcode Workspace ---
# If you are not using CocoaPods, you can safely ignore the workspace file.
# If you ARE using CocoaPods, you SHOULD check this file into source control.
# *.xcworkspace


# --- Swift Package Manager (SPM) ---
# The .build directory is where SPM downloads and builds dependencies.
# The `Packages` directory was used by older versions of SPM.
.build/
Packages/

# The Package.resolved file locks the versions of your dependencies.
# It is STRONGLY RECOMMENDED to check this file into source control to ensure
# all team members and your CI server use the exact same dependency versions.
# Do NOT uncomment the line below unless you have a specific reason.
# Package.resolved

# Xcode-generated SPM configuration
# This is usually not needed unless you have added a package configuration file.
# .swiftpm


# --- Testing & Code Coverage ---
# Ignore test reports and code coverage data generated by Xcode.
*.xctestrun
*.testplan
*.xcresult
*.gcno
*.gcda
*.profdata


# --- Dependency Management: Caching ---

# CocoaPods
# It is generally recommended to check the Pods directory into source control to
# ensure builds are reproducible without relying on the CocoaPods service.
# However, you can ignore it if your team prefers to run `pod install` on checkout.
# See: https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
#
# Pods/


# Carthage
# Ignore compiled frameworks and other Carthage artifacts.
# You should only check in your Cartfile and Cartfile.resolved.
Carthage/Build
Carthage/Checkouts


# --- Tooling: Fastlane ---
# It is recommended to not store screenshots, reports, or other output in Git.
# Use fastlane to regenerate them when needed.
# See: https://docs.fastlane.tools/best-practices/source-control/

fastlane/report.xml
fastlane/Preview.html
fastlane/screenshots
fastlane/test_output